{"ast":null,"code":"var _jsxFileName = \"/home/axelquartz/repos/react_playground/src/components/ModeToggler.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModeToggler() {\n  // Dark mode variables\n  const darkModeOn = true;\n  const darkMode = /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"This is Dark Mode\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 20\n  }, this);\n  const lightMode = /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"This is Light Mode\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 21\n  }, this);\n  // Switch Dark mode function\n  const switchMode = () => {\n    if (darkModeOn == darkMode) {\n      darkModeOn = lightMode;\n    } else {\n      darkModeOn = lightMode;\n    }\n    return;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ModeToggler\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: switchMode,\n      children: \"Switch Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), darkModeOn ? darkMode : lightMode]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_c = ModeToggler;\nexport default ModeToggler;\nvar _c;\n$RefreshReg$(_c, \"ModeToggler\");","map":{"version":3,"names":["ModeToggler","darkModeOn","darkMode","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","lightMode","switchMode","onClick","_c","$RefreshReg$"],"sources":["/home/axelquartz/repos/react_playground/src/components/ModeToggler.js"],"sourcesContent":["function ModeToggler() {\n  // Dark mode variables\n  const darkModeOn = true;\n  const darkMode = <h1>This is Dark Mode</h1>;\n  const lightMode = <h1>This is Light Mode</h1>;\n  // Switch Dark mode function\n  const switchMode = () => {\n    if (darkModeOn == darkMode) {\n      darkModeOn = lightMode;\n    } else {\n      darkModeOn = lightMode;\n    }\n    return;\n  };\n  return (\n    <div>\n      <h1>ModeToggler</h1>\n      <button onClick={switchMode}>Switch Mode</button>\n      {darkModeOn ? darkMode : lightMode}\n    </div>\n  );\n}\n\nexport default ModeToggler;\n"],"mappings":";;AAAA,SAASA,WAAWA,CAAA,EAAG;EACrB;EACA,MAAMC,UAAU,GAAG,IAAI;EACvB,MAAMC,QAAQ,gBAAGC,OAAA;IAAAC,QAAA,EAAI;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC3C,MAAMC,SAAS,gBAAGN,OAAA;IAAAC,QAAA,EAAI;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC7C;EACA,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIT,UAAU,IAAIC,QAAQ,EAAE;MAC1BD,UAAU,GAAGQ,SAAS;IACxB,CAAC,MAAM;MACLR,UAAU,GAAGQ,SAAS;IACxB;IACA;EACF,CAAC;EACD,oBACEN,OAAA;IAAAC,QAAA,gBACED,OAAA;MAAAC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBL,OAAA;MAAQQ,OAAO,EAAED,UAAW;MAAAN,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAChDP,UAAU,GAAGC,QAAQ,GAAGO,SAAS;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV;AAACI,EAAA,GArBQZ,WAAW;AAuBpB,eAAeA,WAAW;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}